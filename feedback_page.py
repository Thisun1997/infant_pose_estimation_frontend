# -*- coding: utf-8 -*-
import time

# Form implementation generated from reading ui file 'feedback_page.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from components.handle_error_message import HandleErrorMessage


class FeedbackPage(QtWidgets.QDialog, HandleErrorMessage):

    def __init__(self, insertion_id=None, parent=None):
        super(FeedbackPage, self).__init__(parent)
        self.parent = parent
        self.user = self.parent.user
        self.setupUi(insertion_id)

    def setupUi(self, insertion_id):
        self.setObjectName("feedbackPage")
        self.resize(561, 451)
        self.closeButton = QtWidgets.QPushButton(self)
        self.closeButton.setGeometry(QtCore.QRect(170, 380, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.closeButton.setFont(font)
        self.closeButton.setStyleSheet("background-color: rgb(255, 255, 255); color: rgb(0, 170, 255)")
        self.closeButton.setObjectName("closeButton")
        self.submitButton = QtWidgets.QPushButton(self)
        self.submitButton.setGeometry(QtCore.QRect(30, 380, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.submitButton.setFont(font)
        self.submitButton.setStyleSheet("background-color: rgb(255, 255, 255); color: rgb(0, 170, 255)")
        self.submitButton.setObjectName("submitButton")
        self.feedbackLineEdit = QtWidgets.QPlainTextEdit(self)
        self.feedbackLineEdit.setGeometry(QtCore.QRect(30, 100, 501, 261))
        # self.feedbackLineEdit.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.feedbackLineEdit.setObjectName("feedbackLineEdit")
        self.feedbackLineEdit.setFont(font)
        self.feedbackLineEdit.setStyleSheet("color:#757575")
        self.descriptionLabel = QtWidgets.QLabel(self)
        self.descriptionLabel.setGeometry(QtCore.QRect(30, 60, 501, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.descriptionLabel.setFont(font)
        self.descriptionLabel.setStyleSheet("color:#757575")
        self.descriptionLabel.setWordWrap(True)
        self.descriptionLabel.setObjectName("descriptionLabel")
        self.feedbackLabel = QtWidgets.QLabel(self)
        self.feedbackLabel.setGeometry(QtCore.QRect(30, 30, 131, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.feedbackLabel.setFont(font)
        self.feedbackLabel.setStyleSheet("color:#757575")
        self.feedbackLabel.setFrameShadow(QtWidgets.QFrame.Plain)
        self.feedbackLabel.setObjectName("feedbackLabel")

        self.addErrorLabel(QtCore.QRect(30, 100, 411, 25), self)

        self.retranslateUi(insertion_id)
        QtCore.QMetaObject.connectSlotsByName(self)

        self.closeButton.clicked.connect(self.close)
        self.submitButton.clicked.connect(lambda: self.save(insertion_id))

    def retranslateUi(self, insertion_id):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("feedbackPage", "Feedback Page"))
        self.closeButton.setText(_translate("feedbackPage", "Close"))
        self.submitButton.setText(_translate("feedbackPage", "Submit"))
        if insertion_id:
            self.descriptionLabel.setText(_translate("feedbackPage", "You can provide any shortcomings, anomalies, etc. you observe in the current pose estimation here."))
        else:
            self.descriptionLabel.setText(_translate("feedbackPage", "You can provide a genral feedback on the system here."))
        self.feedbackLabel.setText(_translate("feedbackPage", "Feedback"))

    def save(self, insertion_id):
        feedback = self.feedbackLineEdit.toPlainText()
        if feedback:
            now_time = time.time_ns()
            data = {
                "feedback": feedback,
                "user": self.user.username,
                "time": now_time
            }
            if insertion_id:
                data["vis_insertion_id"] = insertion_id
            response = self.handlePostRequest("feedback/add", data, True)
            if response:
                self.error.setStyleSheet(u"color: rgb(0, 234, 0)")
                self.displayErrorMessage(True, response)
                # Set up a QTimer to call self.accept() after a delay
                self.timer = QtCore.QTimer(self)
                self.timer.setSingleShot(True)
                self.timer.timeout.connect(self.accept)
                self.timer.start(1000)
        else:
            self.displayErrorMessage(True, "Feedback is empty")




