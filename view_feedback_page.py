# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'view_feedback_page.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QStringListModel
from PyQt5.QtWidgets import QSizePolicy

from components.general_feedback_widget import CustomWidget
from components.specific_feedback_widget import SpecificFeedbackView
from components.top_bar import TopBar
from utils.common_utils import fetch_data
import time


class ViewFeedbackPage(QtWidgets.QDialog):
    def __init__(self, parent, user):
        super().__init__()
        self.parent = parent
        self.user = user
        self.setupUi()

    def setupUi(self):
        try:
            self.setObjectName("viewFeedbackPage")
            self.setEnabled(True)
            self.resize(1058, 735)
            self.topBar = TopBar(self, is_menu_visible=True, logout_visible=True, user=self.user)
            self.label = QtWidgets.QLabel(self)
            self.label.setGeometry(QtCore.QRect(40, 130, 231, 31))
            font = QtGui.QFont()
            font.setPointSize(16)
            font.setBold(True)
            font.setWeight(75)
            self.label.setFont(font)
            self.label.setStyleSheet("color:rgb(0, 170, 255); font-weight:bold")
            self.label.setObjectName("label")
            self.tabWidget = QtWidgets.QTabWidget(self)
            self.tabWidget.setGeometry(QtCore.QRect(40, 180, 961, 521))
            font = QtGui.QFont()
            font.setPointSize(12)
            self.tabWidget.setFont(font)
            self.tabWidget.setStyleSheet("color:#757575")
            self.tabWidget.setObjectName("tabWidget")
            # general feedback
            self.generalFeedbacks = QtWidgets.QWidget()
            font = QtGui.QFont()
            font.setPointSize(12)
            self.generalFeedbacks.setFont(font)
            self.generalFeedbacks.setStyleSheet("color:#757575")
            self.generalFeedbacks.setObjectName("generalFeedbacks")
            # listwidget
            self.listWidget = QtWidgets.QListWidget(self.generalFeedbacks)
            self.listWidget.setGeometry(QtCore.QRect(10, 10, 931, 471))
            self.listWidget.setVisible(False)
            # text replacing list widget
            self.generaltextArea = QtWidgets.QLabel(self.generalFeedbacks)
            self.generaltextArea.setGeometry(QtCore.QRect(10, 10, 931, 471))
            sizePolicy2 = QSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)
            sizePolicy2.setHorizontalStretch(0)
            sizePolicy2.setVerticalStretch(0)
            sizePolicy2.setHeightForWidth(self.generaltextArea.sizePolicy().hasHeightForWidth())
            self.generaltextArea.setSizePolicy(sizePolicy2)
            self.generaltextArea.setObjectName("generaltextArea")
            self.generaltextArea.setAlignment(Qt.AlignCenter)
            self.generaltextArea.setStyleSheet("color:#757575")
            self.generaltextArea.setFont(font)
            self.generaltextArea.setMinimumSize(QtCore.QSize(931, 471))
            self.generaltextArea.setMaximumSize(QtCore.QSize(931, 471))
            self.generaltextArea.setAlignment(Qt.AlignCenter)
            self.generaltextArea.wordWrap()
            self.generaltextArea.setVisible(True)
            self.tabWidget.addTab(self.generalFeedbacks, "")
            # specific feedback
            self.specificFeedback = QtWidgets.QWidget()
            self.specificFeedback.setObjectName("specificFeedback")
            self.scrollArea = QtWidgets.QScrollArea(self.specificFeedback)
            self.scrollArea.setGeometry(QtCore.QRect(10, 10, 931, 471))
            sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
            self.scrollArea.setSizePolicy(sizePolicy)
            self.scrollArea.setWidgetResizable(True)
            self.scrollArea.setObjectName("scrollArea")
            self.scrollAreaWidgetContents = QtWidgets.QWidget()
            self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
            self.gridLayout_4 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
            self.gridLayout_4.setObjectName("gridLayout_4")
            self.scrollArea.setVisible(False)
            # text replacing scroll area
            self.specifictextArea = QtWidgets.QLabel(self.specificFeedback)
            self.specifictextArea.setGeometry(QtCore.QRect(10, 10, 931, 471))
            sizePolicy2 = QSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)
            sizePolicy2.setHorizontalStretch(0)
            sizePolicy2.setVerticalStretch(0)
            sizePolicy2.setHeightForWidth(self.specifictextArea.sizePolicy().hasHeightForWidth())
            self.specifictextArea.setSizePolicy(sizePolicy2)
            self.specifictextArea.setObjectName("specifictextArea")
            self.specifictextArea.setAlignment(Qt.AlignCenter)
            self.specifictextArea.setStyleSheet("color:#757575")
            self.specifictextArea.setFont(font)
            self.specifictextArea.setMinimumSize(QtCore.QSize(931, 471))
            self.specifictextArea.setMaximumSize(QtCore.QSize(931, 471))
            self.specifictextArea.setAlignment(Qt.AlignCenter)
            self.specifictextArea.wordWrap()
            self.specifictextArea.setVisible(True)
            self.tabWidget.addTab(self.specificFeedback, "")

            self.topBar.loginButton.clicked.connect(self.gotoHome)
            self.topBar.menuButton.clicked.connect(self.goToMenu)

            self.retranslateUi()
            self.tabWidget.setCurrentIndex(0)
            QtCore.QMetaObject.connectSlotsByName(self)

            self.setValues()
        except Exception as e:
            print(e)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.label.setText(_translate("viewFeedbackPage", "View Feedbacks"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.generalFeedbacks),
                                  _translate("viewFeedbackPage", "General Feedbacks"))
        self.generaltextArea.setText(_translate("viewFeedbackPage", "General Feedbacks will be available here"))
        self.specifictextArea.setText(_translate("viewFeedbackPage", "Specific Feedbacks will be available here"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.specificFeedback),
                                  _translate("viewFeedbackPage", "Input Specific Feedabcks"))

    def gotoHome(self):
        if self.user:
            self.user = None
        i = self.parent.count()-1
        while self.parent.count() > 1:
            widget = self.parent.widget(i)
            print(widget.objectName())
            self.parent.removeWidget(widget)
            i -= 1
        self.parent.setCurrentIndex(0)

    def goToMenu(self):
        for i in range(self.parent.count()):
            widget = self.parent.widget(i)
            if widget.objectName() == "menuPage":
                self.parent.setCurrentIndex(i)
                break

    def setValues(self):
        try:
            data = fetch_data("feedback/")
            i = 0
            if len(data) > 0:
                for feedback in data:
                    time_ = "N/A"
                    user = "N/A"
                    if "time" in feedback: time_ = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(feedback["time"] / 1e9))
                    if "user" in feedback: user = feedback["user"]
                    if "vis_insertion_id" in feedback:
                        inserted_id = feedback["vis_insertion_id"]
                        vis_data = fetch_data("patients/visualization_data", {"_id": inserted_id})
                        data = {
                            "id": vis_data["patient_id"],
                            "depth": vis_data["depth"],
                            "pressure": vis_data["pressure"],
                            "time": time_,
                            "visualization": vis_data["visualization"],
                            "feedback": feedback["feedback"],
                            "user": user
                        }
                        feedbackWidget = QtWidgets.QWidget(self.scrollAreaWidgetContents)
                        feedbackWidget.setMinimumSize(QtCore.QSize(890, 250))
                        feedbackWidget.setMaximumSize(QtCore.QSize(890, 250))
                        feedbackWidget.setAutoFillBackground(True)
                        feedbackWidget.setObjectName("feedbackWidget")
                        SpecificFeedbackView(feedbackWidget, data)
                        horizontal_line = QtWidgets.QFrame(self.scrollAreaWidgetContents)
                        horizontal_line.setFrameShape(QtWidgets.QFrame.HLine)
                        horizontal_line.setFrameShadow(QtWidgets.QFrame.Sunken)
                        self.gridLayout_4.addWidget(feedbackWidget, i + 1, 0, 1, 1)
                        self.gridLayout_4.addWidget(horizontal_line, i + 2, 0, 1, 1)
                        i += 2
                    else:
                        item = QtWidgets.QListWidgetItem(self.listWidget)
                        custom_widget = CustomWidget([f"Submitted Time - {time_}",
                                                      f"Submitted By - {user}",
                                                      f"Feedback - {feedback['feedback']}"])
                        item.setSizeHint(custom_widget.sizeHint())
                        self.listWidget.setItemWidget(item, custom_widget)
                if i > 0:
                    self.scrollAreaWidgetContents.adjustSize()
                    self.scrollArea.setWidget(self.scrollAreaWidgetContents)
                    self.scrollArea.setVisible(True)
                    self.specifictextArea.setVisible(False)
                if self.listWidget.count() > 0:
                    self.listWidget.setVisible(True)
                    self.generaltextArea.setVisible(False)
        except Exception as e:
            self.listWidget.setVisible(False)
            self.generaltextArea.setVisible(True)
            self.scrollArea.setVisible(False)
            self.specifictextArea.setVisible(True)
            self.generaltextArea.setText(f"Error: {str(e)}")
            self.specifictextArea.setText(f"Error: {str(e)}")
