# -*- coding: utf-8 -*-
import os
import time

import numpy as np
# Form implementation generated from reading ui file 'image_load_page.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QRect, Qt
from PyQt5.QtWidgets import QSizePolicy

from components.dialog_with_guide import DialogWithGuide
from components.handle_error_message import HandleErrorMessage
from components.matplotlib_canvas import MatplotlibCanvas
from components.top_bar import TopBar
from edit_patient_data_page import EditPatientPage
from pose_visualization_page import PoseVisualizationPage
from utils.common_utils import fetch_data, get_prediction, sendPostRequest


class ImageUploadPage(DialogWithGuide, HandleErrorMessage):
    def __init__(self, parent, user, registration_id=None):
        super(ImageUploadPage, self).__init__(parent)
        self.registration_id = registration_id
        self.images = {}
        self.input_validation_errors = []
        self.user = user
        self.setupUi()

    def setupUi(self):
        self.setObjectName("imageUploadPage")
        self.resize(1058, 735)
        self.topBar = TopBar(self, is_menu_visible=True, logout_visible=True, user=self.user)
        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(40, 130, 231, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color:rgb(0, 170, 255); font-weight:bold")
        self.label.setObjectName("label")
        self.uploadButton = QtWidgets.QPushButton(self)
        self.uploadButton.setGeometry(QtCore.QRect(40, 620, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.uploadButton.setFont(font)
        self.uploadButton.setStyleSheet("background-color: rgb(255, 255, 255); color: rgb(0, 170, 255)")
        self.uploadButton.setObjectName("uploadButton")
        self.uploadButton.setDisabled(True)
        self.gridLayoutWidget = QtWidgets.QWidget(self)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(40, 200, 941, 81))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setHorizontalSpacing(17)
        self.gridLayout.setVerticalSpacing(6)
        self.gridLayout.setObjectName("gridLayout")
        self.pressureUploadButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pressureUploadButton.setFont(font)
        self.pressureUploadButton.setStyleSheet("color:#757575")
        self.pressureUploadButton.setObjectName("pressureUploadButton")
        self.gridLayout.addWidget(self.pressureUploadButton, 1, 2, 1, 1)
        self.pressureFileLineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.pressureFileLineEdit.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pressureFileLineEdit.setFont(font)
        self.pressureFileLineEdit.setObjectName("pressureFileLineEdit")
        self.gridLayout.addWidget(self.pressureFileLineEdit, 1, 1, 1, 1)
        self.pressureLabel = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pressureLabel.setFont(font)
        self.pressureLabel.setStyleSheet("color:#757575")
        self.pressureLabel.setObjectName("pressureLabel")
        self.gridLayout.addWidget(self.pressureLabel, 1, 0, 1, 1)
        self.depthFileLineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.depthFileLineEdit.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.depthFileLineEdit.setFont(font)
        self.depthFileLineEdit.setObjectName("depthFileLineEdit")
        self.gridLayout.addWidget(self.depthFileLineEdit, 0, 1, 1, 1)
        self.depthLabel = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.depthLabel.setFont(font)
        self.depthLabel.setStyleSheet("color:#757575")
        self.depthLabel.setObjectName("depthLabel")
        self.gridLayout.addWidget(self.depthLabel, 0, 0, 1, 1)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(40, 280, 941, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.labelLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.labelLayout.setContentsMargins(0, 0, 0, 0)
        self.labelLayout.setObjectName("labelLayout")
        self.depthLabel_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.depthLabel_2.setFont(font)
        self.depthLabel_2.setStyleSheet("color:#757575")
        self.depthLabel_2.setAlignment(Qt.AlignCenter)
        self.depthLabel_2.setObjectName("depthLabel_2")
        self.labelLayout.addWidget(self.depthLabel_2)
        self.pressureLabel_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pressureLabel_2.setFont(font)
        self.pressureLabel_2.setStyleSheet("color:#757575")
        self.pressureLabel_2.setAlignment(Qt.AlignCenter)
        self.pressureLabel_2.setObjectName("pressureLabel_2")
        self.labelLayout.addWidget(self.pressureLabel_2)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(40, 320, 941, 281))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_5 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_5.setMinimumSize(QtCore.QSize(467, 279))
        self.label_5.setMaximumSize(QtCore.QSize(467, 279))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color:#757575")
        self.label_5.setObjectName("label_5")
        self.depthCanvas = MatplotlibCanvas(self.label_5)
        self.horizontalLayout_3.addWidget(self.depthCanvas)
        self.label_6 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_6.setMinimumSize(QtCore.QSize(466, 279))
        self.label_6.setMaximumSize(QtCore.QSize(466, 279))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color:#757575")
        self.label_6.setObjectName("label_6")
        self.pressureCanvas = MatplotlibCanvas(self.label_6)
        self.horizontalLayout_3.addWidget(self.pressureCanvas)
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self)
        self.gridLayoutWidget_2.setObjectName(u"gridLayoutWidget_2")
        self.gridLayoutWidget_2.setGeometry(QRect(40, 160, 941, 41))
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setObjectName(u"gridLayout_2")
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        if self.registration_id:
            self.idLineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
            self.idLineEdit.setObjectName(u"idLineEdit")
            self.idLineEdit.setEnabled(False)
            sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(self.idLineEdit.sizePolicy().hasHeightForWidth())
            self.idLineEdit.setSizePolicy(sizePolicy)
            font = QtGui.QFont()
            font.setPointSize(12)
            self.idLineEdit.setFont(font)
            self.gridLayout_2.addWidget(self.idLineEdit, 0, 1, 1, 1)
            self.idLabel = QtWidgets.QLabel(self.gridLayoutWidget_2)
            self.idLabel.setObjectName(u"idLabel")
            self.idLabel.setFont(font)
            self.idLabel.setStyleSheet(u"color:#757575")
            self.gridLayout_2.addWidget(self.idLabel, 0, 0, 1, 1)
            self.nameLineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
            self.nameLineEdit.setObjectName(u"nameLineEdit")
            self.nameLineEdit.setEnabled(False)
            self.nameLineEdit.setFont(font)
            self.gridLayout_2.addWidget(self.nameLineEdit, 0, 3, 1, 1)
            self.nameLabel = QtWidgets.QLabel(self.gridLayoutWidget_2)
            self.nameLabel.setObjectName(u"nameLabel")
            self.nameLabel.setFont(font)
            self.nameLabel.setStyleSheet(u"color:#757575")
            self.gridLayout_2.addWidget(self.nameLabel, 0, 2, 1, 1)
        else:
            self.selectPatientLabel = QtWidgets.QLabel(self.gridLayoutWidget_2)
            self.selectPatientLabel.setObjectName(u"idLabel")
            sizePolicy = QtWidgets.QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(self.selectPatientLabel.sizePolicy().hasHeightForWidth())
            self.selectPatientLabel.setSizePolicy(sizePolicy)
            self.selectPatientLabel.setMinimumSize(QtCore.QSize(115, 0))
            font = QtGui.QFont()
            font.setPointSize(12)
            self.selectPatientLabel.setFont(font)
            self.selectPatientLabel.setStyleSheet(u"color:#757575")
            self.gridLayout_2.addWidget(self.selectPatientLabel, 0, 0, 1, 1)
            self.comboBox = QtWidgets.QComboBox(self.gridLayoutWidget_2)
            self.comboBox.setObjectName("comboBox")
            self.comboBox.setFont(font)
            self.comboBox.setStyleSheet(u"color:#757575")
            sizePolicy2 = QtWidgets.QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
            sizePolicy2.setHorizontalStretch(0)
            sizePolicy2.setVerticalStretch(0)
            sizePolicy2.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
            self.comboBox.setSizePolicy(sizePolicy2)
            self.gridLayout_2.addWidget(self.comboBox, 0, 1, 1, 1)
            self.comboBox.currentIndexChanged.connect(self.selection_changed)
            self.editButton = QtWidgets.QPushButton(self.gridLayoutWidget_2)
            self.editButton.setObjectName(u"editButton")
            self.editButton.setStyleSheet(u"color:#757575")
            self.editButton.setFont(font)
            self.gridLayout_2.addWidget(self.editButton, 0, 2, 1, 1)
            self.editButton.clicked.connect(self.edit_patient)


        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        self.setValues()
        self.addErrorLabel(QRect(40, 170, 201, 21), self)
        self.topBar.loginButton.clicked.connect(self.gotoHome)
        self.topBar.menuButton.clicked.connect(self.goToMenu)

        self.pressureUploadButton.clicked.connect(lambda: self.upload_file_and_display())
        self.uploadButton.clicked.connect(lambda: self.process_images())

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("imageUploadPage", "Dialog"))
        self.label.setText(_translate("imageUploadPage", "Upload Images"))
        self.uploadButton.setText(_translate("imageUploadPage", "Process"))
        self.pressureUploadButton.setText(_translate("imageUploadPage", "Upload Images"))
        self.pressureLabel.setText(_translate("imageUploadPage", "Pressure image<sup>*</sup>"))
        self.depthLabel.setText(_translate("imageUploadPage", "Depth image<sup>*</sup>"))
        self.depthLabel_2.setText(_translate("imageUploadPage", "Depth image"))
        self.pressureLabel_2.setText(_translate("imageUploadPage", "Pressure image"))
        if self.registration_id:
            self.nameLabel.setText(_translate("imageUploadPage", "Name"))
            self.idLabel.setText(_translate("imageUploadPage", "Registration ID"))
        else:
            self.selectPatientLabel.setText(_translate("imageUploadPage", "Select Patient"))
            self.editButton.setText(_translate("imageUploadPage", "Edit Patient"))

    def upload_file_and_display(self):
        try:
            folderPath = QtWidgets.QFileDialog.getExistingDirectory(self, 'Select Folder', 'D:/IIT/academic/Final_project/inputs')
            if folderPath:
                error_message = self.isValidFiles(folderPath)
                if error_message:
                    self.displayErrorMessage(True, error_message)
                    self.depthFileLineEdit.clear()
                    self.depthCanvas.axes.clear()
                    self.depthCanvas.draw_idle()
                    self.pressureFileLineEdit.clear()
                    self.pressureCanvas.axes.clear()
                    self.pressureCanvas.draw_idle()
                else:
                    self.displayErrorMessage(False)
                    self.uploadButton.setDisabled(False)
                    for modality in self.images:
                        fileName = self.images[modality]["file_name"].replace("\\", "/")
                        np_array = self.images[modality]["np_array"]
                        if modality == "depth":
                            self.depthFileLineEdit.setText(fileName)
                            self.depthCanvas.axes.clear()
                            self.depthCanvas.draw_idle()
                            self.depthCanvas.axes.imshow(np_array)
                            self.depthCanvas.draw()
                        elif modality == "pressure":
                            self.pressureFileLineEdit.setText(fileName)
                            self.pressureCanvas.axes.clear()
                            self.pressureCanvas.draw_idle()
                            self.pressureCanvas.axes.imshow(np_array)
                            self.pressureCanvas.draw()
        except Exception as e:
            self.displayErrorMessage(True, "Error occurred: " + str(e))

    def isValidFiles(self, folder_path):
        file_names = []
        self.images = {}
        for root, dirs, files in os.walk(folder_path):
            if len(files) != 2:
                return "More than 2 files are found."
            for file in files:
                if file.endswith('.npy'):
                    file_name = os.path.join(root, file)
                    file_names.append(file_name)
                else:
                    return "Some files are not in 'npy' format"
            for file_name in file_names:
                np_array = np.load(file_name)
                if np_array.dtype == np.uint16:
                    if "depth" in self.images:
                        return "input file/s are not in correct format"
                    self.images["depth"] = {}
                    self.images["depth"]["np_array"] = np_array
                    self.images["depth"]["file_name"] = file_name
                elif np_array.dtype == np.float32:
                    if "pressure" in self.images:
                        return "input file/s are not in correct format"
                    self.images["pressure"] = {}
                    self.images["pressure"]["np_array"] = np_array
                    self.images["pressure"]["file_name"] = file_name
                else:
                    return "input file/s are not in correct format"

    def setValues(self):
        try:
            if self.registration_id:
                data = fetch_data("patients/data", {"_id": self.registration_id})
                self.idLineEdit.setText(str(self.registration_id))
                self.nameLineEdit.setText(data["patient_name"])
            else:
                data = fetch_data("patients/")
                for patient in data:
                    self.comboBox.addItem(str(patient["_id"]) + " - " + patient["patient_name"])
        except Exception as e:
            self.displayErrorMessage(True, "Error fetching data: " + str(e))

    def process_images(self):
        QtWidgets.QApplication.setOverrideCursor(Qt.WaitCursor)
        now_time = time.time_ns()
        data = {
            "patient_id": self.registration_id,
            "depth": None,
            "pressure": None,
            "time": now_time,
            "user": self.user.username
        }
        if len(self.images) != 2:
            self.displayErrorMessage(True, "Inputs marked with * are required")
        else:
            for modality in self.images:
                data[modality] = self.images[modality]["np_array"].tolist()
            response = sendPostRequest("visualizations/prediction", data)
            QtWidgets.QApplication.restoreOverrideCursor()
            if response["code"] != 200:
                self.displayErrorMessage(True, response["message"])
            else:
                self.stack_pose_visualization_page(response["message"])

    def stack_pose_visualization_page(self, inserted_id):
        pose_visualization_page = PoseVisualizationPage(self.parent, self.user, inserted_id)
        self.parent.addWidget(pose_visualization_page)
        self.parent.setCurrentIndex(self.parent.currentIndex() + 1)

    def handle_image_input_validation(self, modality, remove_message=False):
        modality_in_list = len([s for s in self.input_validation_errors if modality in s]) != 0
        error_message = modality + " image is not in accepted format."
        if remove_message:
            if modality_in_list:
                self.input_validation_errors.remove(error_message)
        else:
            if not modality_in_list:
                self.input_validation_errors.append(error_message)
        if len(self.input_validation_errors) == 0:
            self.displayErrorMessage(False)
            self.uploadButton.setDisabled(False)
        else:
            self.displayErrorMessage(True, " ".join(self.input_validation_errors))

    def selection_changed(self, i):
        self.registration_id = int(self.comboBox.itemText(i).split("-")[0])

    def edit_patient(self):
        if self.registration_id:
            edit_patient_page = EditPatientPage(self.registration_id, self)
            edit_patient_page.show()
